# The name of the workflow that will be displayed in the GitHub Actions tab.
name: CI/CD Pipeline

# The 'on' keyword specifies the events that trigger the workflow.
on:
  push:
    # This workflow will run on every push to the 'main' branch.
    branches:
      - main
  pull_request:
    # This workflow will run on every pull request that targets the 'main' branch.
    branches:
      - main

# 'jobs' groups together all the jobs that run in the workflow.
jobs:
  # The 'test' job is for running tests.
  test:
    name: Run Tests                     # Display name for the test job
    runs-on: ubuntu-latest              # Use the latest Ubuntu VM for this job

    steps:
      - name: Checkout repository       # Step 1: Check out repo code
        uses: actions/checkout@v4

      - name: Set up Python             # Step 2: Install the correct Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'        # Use Python 3.11

      - name: Install dependencies      # Step 3: Create a virtual env and install deps
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests                 # Step 4: Run pytest inside the virtual env
        run: |
          source .venv/bin/activate
          PYTHONPATH=. pytest -v        # `-v` gives verbose test output

  # The 'deploy' job is for deploying the application.
  deploy:
    needs: test                         # Run this only after tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy from main branch

    steps:
      - name: Checkout repository       # Step 1: Check out code again
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          # Here we define environment variables that will be available only in this step.
          # They are securely pulled from GitHub Secrets (set in repo Settings > Secrets > Actions).
          # This way, sensitive information (like API keys) is NOT hardcoded into the workflow.
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}   # Secret API key to authenticate with Render
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }} # Unique ID of your app/service on Render
        run: |
          # The following command (curl) makes a POST request to Render's API.
          # This request tells Render: "Please create a new deployment for my service."

          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -d '' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys